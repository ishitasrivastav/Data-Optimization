{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "943776ab",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Matrix A: \n",
      "[2, 3, 1]\n",
      "[3, 3, 1]\n",
      "[2, 4, 1]\n",
      "\n",
      "Matrix B: \n",
      "[1, -2, 3]\n",
      "[2, 4, 5]\n",
      "[0, -3, -1]\n",
      "\n",
      "Augmented Matrix : \n",
      "[2, 3, 1, 1, -2, 3]\n",
      "[3, 3, 1, 2, 4, 5]\n",
      "[2, 4, 1, 0, -3, 1]\n",
      "\n",
      "\n",
      " Diagonal entry made 1 Interation number k=  0\n",
      "[1.0, 1.5, 0.5, 0.5, -1.0, 1.5]\n",
      "[3, 3, 1, 2, 4, 5]\n",
      "[2, 4, 1, 0, -3, 1]\n",
      "\n",
      "\n",
      " Diagonal entry made 1 Interation number k=  1\n",
      "[1.0, 1.5, 0.5, 0.5, -1.0, 1.5]\n",
      "[-0.0, 1.0, 0.3333333333333333, -0.3333333333333333, -4.666666666666667, -0.3333333333333333]\n",
      "[0.0, 1.0, 0.0, -1.0, -1.0, -2.0]\n",
      "\n",
      "\n",
      " Diagonal entry made 1 Interation number k=  2\n",
      "[1.0, 0.0, 0.0, 1.0, 6.0, 2.0]\n",
      "[-0.0, 1.0, 0.3333333333333333, -0.3333333333333333, -4.666666666666667, -0.3333333333333333]\n",
      "[-0.0, -0.0, 1.0, 2.0000000000000004, -11.000000000000002, 5.000000000000001]\n",
      "\n",
      "\n",
      " All Non-Diagonal entries made to 0 Interation Number k=  2\n",
      "[1.0, 0.0, 0.0, 1.0, 6.0, 2.0]\n",
      "[0.0, 1.0, 0.0, -1.0, -1.0, -2.0000000000000004]\n",
      "[-0.0, -0.0, 1.0, 2.0000000000000004, -11.000000000000002, 5.000000000000001]\n",
      "\n",
      "\n",
      " The Inverse matrix is\n",
      "[1.0, 6.0, 2.0]\n",
      "[-1.0, -1.0, -2.0000000000000004]\n",
      "[2.0000000000000004, -11.000000000000002, 5.000000000000001]\n"
     ]
    }
   ],
   "source": [
    "#inverse of matrix:\n",
    "\n",
    "A = [[2, 3, 1],\n",
    "   [3, 3, 1],\n",
    "   [2, 4, 1]]\n",
    "a = len(A)\n",
    "print(\"\\nMatrix A: \")\n",
    "for i in range(a):\n",
    "    print(A[i])\n",
    "    \n",
    "B = [[1, -2, 3],\n",
    "     [2, 4, 5],\n",
    "     [0, -3, -1]]\n",
    "b = len(B)\n",
    "print(\"\\nMatrix B: \")\n",
    "for i in range(b):\n",
    "    print(B[i])  \n",
    "\n",
    "ab= [[2, 3, 1, 1, -2, 3],\n",
    "      [3, 3, 1, 2, 4, 5], \n",
    "      [2, 4, 1, 0, -3, 1]]\n",
    "n = len(ab)\n",
    "print(\"\\nAugmented Matrix : \")\n",
    "for i in range(n):\n",
    "    print(ab[i])\n",
    "    \n",
    "for k in range(n):\n",
    "    #In k column make diagonal element 1\n",
    "    #Rk <-- Rk/pivot where pivot = a[k][k]\n",
    "    pivot = ab[k][k]\n",
    "    for j in range(2*n):\n",
    "        ab[k][j] = ab[k][j]/pivot\n",
    "    print(\"\\n\\n Diagonal entry made 1 Interation number k= \",k)\n",
    "    for i in range(n):\n",
    "        print(ab[i])\n",
    "        \n",
    "#In column k make all non-diagonal entries zero \n",
    "#Ri <-- Ri - pivot * Rk where pivot = ab[i][k]\n",
    "\n",
    "    for i in range(n):\n",
    "        if i != k:\n",
    "            pivot = ab[i][k]\n",
    "            for j in range (2*n):\n",
    "                ab[i][j] = ab[i][j] - pivot * ab[k][j]\n",
    "            \n",
    "print(\"\\n\\n All Non-Diagonal entries made to 0 Interation Number k= \",k)\n",
    "for i in range(n):\n",
    "    print(ab[i])\n",
    "    \n",
    "print(\"\\n\\n The Inverse matrix is\")\n",
    "for i in range(n):\n",
    "    print(ab[i][n:2*n])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06c2ff0c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter the number of rows:3\n",
      "Enter the number of columns:3\n",
      "Enter the entries row wise:\n",
      "2\n",
      "3\n",
      "5\n",
      "1\n",
      "0\n",
      "5\n",
      "4\n",
      "1\n",
      "6\n",
      "matrix A = \n",
      "2 3 5 \n",
      "1 0 5 \n",
      "4 1 6 \n",
      "rank= 1\n"
     ]
    }
   ],
   "source": [
    "#python code for finding rank of a matrix\n",
    "\n",
    "Row = int(input(\"Enter the number of rows:\"))\n",
    "Column = int(input(\"Enter the number of columns:\"))\n",
    "def read(R,C):\n",
    "    m1=[]\n",
    "    print(\"Enter the entries row wise:\")\n",
    "    for i in range(R):\n",
    "        a = []\n",
    "        for j in range(C):\n",
    "            a.append(int(input()))\n",
    "        m1.append(a)\n",
    "    return m1\n",
    "def print_matrix(m1,R,C):\n",
    "    for i in range(R):\n",
    "        for j in range(C):\n",
    "            print(m1[i][j], end=\" \")\n",
    "        print()\n",
    "a = read(Row,Column)\n",
    "print(\"matrix A = \")\n",
    "print_matrix(a,Row,Column)\n",
    "f=min(Row,Column)\n",
    "def rank(a,R,C,f):\n",
    "    count = 0\n",
    "    x=0\n",
    "    for i in range(f):\n",
    "        if a[i][i] == 0:\n",
    "            x+=1\n",
    "        else:\n",
    "            count += 1\n",
    "        temp=[x,count]\n",
    "        return temp\n",
    "g= [0,0]\n",
    "for i in range (Row):\n",
    "    if a[i][i]==0:\n",
    "        g[0]+=1\n",
    "    else:\n",
    "        pivot = 1/a[i][i]\n",
    "        for j in range (Column):\n",
    "            a[i][j]=pivot*a[i][j]\n",
    "        for k in range(Row):\n",
    "            if i != k:\n",
    "                pivot = a[k][i]\n",
    "                for j in range (Column):\n",
    "                    a[k][j]=a[k][j]-pivot*a[i][j]\n",
    "r= rank(a, Row, Column, f)\n",
    "print(\"rank=\",r[1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2da1958d",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
