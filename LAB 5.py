{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a1276762",
   "metadata": {},
   "outputs": [],
   "source": [
    "## Solve a Given LPP Using Simplex Method"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "17a61585",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The cost vector in Std form [2, 3, 0, 0, 0, 0]\n",
      "Matrix A in STD form\n",
      "[1, 1, -1, 4, 1, 0, 8]\n",
      "[1, -2, -1, 1, 0, 1, 2]\n",
      "m,n= 2 , 4\n",
      "lpp in simplext table:\n",
      "[1, 1, -1, 4, 1, 0, 8, 4]\n",
      "[1, -2, -1, 1, 0, 1, 2, 5]\n",
      "[-2, -3, 0, 0, 0, 0, 0]\n",
      "basis: [0, 0, 0, 0, 1, 1]\n",
      "initial BFS\n",
      "m,n= 2 , 4\n",
      "is this an optimal solution? False\n",
      "m,n= 2 , 4\n",
      "\n",
      "\n",
      " simplex method iteration= 1\n",
      "m,n= 2 , 4\n",
      "m,n= 2 , 4\n",
      "ratio [8.0, 999999]\n",
      "minimum 8.0\n",
      "enter 1 outgoing 0\n",
      "the pivot element is alpp[1][0]=1\n",
      "new basis.. [0, 1, 0, 0, 0, 1]\n",
      "revised simplex matrix..\n",
      "[1.0, 1.0, -1.0, 4.0, 1.0, 0.0, 8.0, 1]\n",
      "[3.0, 0.0, -3.0, 9.0, 2.0, 1.0, 18.0, 5]\n",
      "[1.0, 0.0, -3.0, 12.0, 3.0, 0.0, 24.0]\n",
      "m,n= 2 , 4\n",
      "is this an optimal solution? False\n",
      "m,n= 2 , 4\n",
      "\n",
      "\n",
      " simplex method iteration= 2\n",
      "m,n= 2 , 4\n",
      "m,n= 2 , 4\n",
      "ratio [999999, 999999]\n",
      "minimum 999999\n",
      "optimal solution reached\n",
      "\n",
      "\n",
      "optimal solution 24.0\n",
      "x 1 = 8.0\n",
      "x 5 = 18.0\n"
     ]
    }
   ],
   "source": [
    "## ISHITA 2367406\n",
    "\n",
    "def lpp_std_form(c,a,bt):\n",
    "    m1,n= len(c),len(a[0])\n",
    "    for i in range(m1,n+m1):\n",
    "        c.append(0)\n",
    "    m=len(a)\n",
    "    for i in range (m):\n",
    "        for j in range (n,n+m):\n",
    "            if i==(j-n):\n",
    "                a[i].append(1)\n",
    "            else:\n",
    "                a[i].append(0)\n",
    "        a[i].append(bt[i])\n",
    "    return(c,a)\n",
    "def stdform_table(c,a):\n",
    "    m=len(a)\n",
    "    n=len(c)-m\n",
    "    print(\"m,n=\",m,\",\",n)\n",
    "    c1=[]\n",
    "    for i in range(m+n):\n",
    "        c1.append(-1*c[i])\n",
    "    a.append(c1)\n",
    "    basis=[]\n",
    "    for i in range(n):\n",
    "        basis.append(0)\n",
    "    for i in range(m):\n",
    "        basis.append(1)\n",
    "    for i in range(m):\n",
    "        a[i].append(n+i)\n",
    "    a[m].append(0)\n",
    "    return(a,basis)\n",
    "def check_optimal(a):\n",
    "    optimal= True\n",
    "    m=len(a)-1\n",
    "    n= len(a[0])-m-2\n",
    "    print(\"m,n=\",m,\",\",n)\n",
    "    for j in range(n+m):\n",
    "        if a[m][j]<0:\n",
    "            optimal= False\n",
    "            break\n",
    "    return(optimal)\n",
    "def outgoing_variable(a,enter):\n",
    "    j = enter\n",
    "    m = len(a)-1\n",
    "    n = len(a[0])-m-2\n",
    "    print(\"m,n=\",m,\",\",n)\n",
    "    ratio=[]\n",
    "    for i in range(m):\n",
    "        if a[i][j]>0:\n",
    "            r=a[i][m+n]/a[i][j]\n",
    "        else:\n",
    "            r=999999\n",
    "        ratio.append(r)\n",
    "    minimum=min(ratio)\n",
    "    i = ratio.index(minimum)\n",
    "    print(\"ratio\",ratio)\n",
    "    print(\"minimum\",minimum)\n",
    "    return(i,minimum)\n",
    "def entering_variable(a):\n",
    "    m=len(a)-1\n",
    "    n=len(a[0])-m-2\n",
    "    print(\"m,n=\",m,\",\",n)\n",
    "    minimum=min(a[m])\n",
    "    j=a[m].index(minimum)\n",
    "    return j\n",
    "def improved_bfs(a,enter,outgo):\n",
    "    m=len(a)\n",
    "    n=len(a[0])-1\n",
    "    pivot=a[outgo][enter]\n",
    "    for j in range (n):\n",
    "        a[outgo][j]=a[outgo][j]/pivot\n",
    "    for i in range (m):\n",
    "        if i!=outgo:\n",
    "            pivot1=a[i][enter]\n",
    "            for j in range (n):\n",
    "                a[i][j]=a[i][j]-a[outgo][j]*pivot1\n",
    "    out=int(a[outgo][n])\n",
    "    basis[out]=0\n",
    "    basis[enter]=1\n",
    "    a[outgo][n]=enter\n",
    "    return (a,basis)\n",
    "\n",
    "c=[2,3]\n",
    "a=[[1,1,-1,4],\n",
    "   [1,-2,-1,1],]\n",
    "bt=[8,2]\n",
    "cstd,astd=lpp_std_form(c,a,bt)\n",
    "print(\"The cost vector in Std form\",cstd)\n",
    "print(\"Matrix A in STD form\")\n",
    "m=len(astd)\n",
    "for i in range(m):\n",
    "    print(astd[i])\n",
    "alpp,basis=stdform_table(cstd,astd)\n",
    "print(\"lpp in simplext table:\")\n",
    "for i in range(m+1):\n",
    "    print(alpp[i])\n",
    "print(\"basis:\",basis)\n",
    "print(\"initial BFS\")\n",
    "print(\"is this an optimal solution?\",check_optimal(alpp))\n",
    "iteration=0\n",
    "while check_optimal(alpp)==False:\n",
    "    iteration+=1\n",
    "    print(\"\\n\\n simplex method iteration=\",iteration)\n",
    "    enter=entering_variable(alpp)\n",
    "    outgo,mini=outgoing_variable(alpp,enter)\n",
    "    if mini==999999:\n",
    "        print(\"optimal solution reached\")\n",
    "        break\n",
    "    print(\"enter\",enter,\"outgoing\",outgo)\n",
    "    print(f'the pivot element is alpp[{enter}][{outgo}]={alpp[enter][outgo]}')\n",
    "    a1,basis=improved_bfs(alpp,enter,outgo)\n",
    "    print(\"new basis..\",basis)\n",
    "    print(\"revised simplex matrix..\")\n",
    "    for i in range(m+1):\n",
    "        print(a1[i])\n",
    "    alpp=a1\n",
    "    print(\"is this an optimal solution?\",check_optimal(alpp))\n",
    "print(\"\\n\\noptimal solution\",alpp[m][-1])\n",
    "for i in range(m):\n",
    "    print(\"x\",alpp[i][-1],\"=\",alpp[i][-2])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f731608f",
   "metadata": {},
   "outputs": [],
   "source": [
    "WW"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
