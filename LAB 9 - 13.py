{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "69fcaccf",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "No of iterations 4\n",
      "\n",
      "f(a1)= -24.360679774997898,f(b1)= -18.95816066493144\n",
      "max= -18.95816066493144\n",
      "updated range:\t [0, 1.2360679774997898]\n",
      "difference :  1.2360679774997898\n",
      "\n",
      "f(a2)= -21.098514489125982,f(b2)= -24.360679774997894\n",
      "max= -21.098514489125982\n",
      "updated range:\t [0.4721359549995794, 1.2360679774997898]\n",
      "difference :  0.7639320225002104\n",
      "\n",
      "f(a3)= -24.36067977499789,f(b3)= -23.592461852053887\n",
      "max= -23.592461852053887\n",
      "updated range:\t [0.4721359549995794, 0.9442719099991589]\n",
      "difference :  0.4721359549995795\n",
      "\n",
      "f(a4)= -23.83743531177222,f(b4)= -24.360679774997894\n",
      "max= -23.83743531177222\n",
      "updated range:\t [0.6524758424985279, 0.9442719099991589]\n",
      "difference :  0.29179606750063103\n"
     ]
    }
   ],
   "source": [
    "# Golden Bisection Method\n",
    "\n",
    "# Q) x**4 - 14x**3 + 60x**2 - 70x   [0,2]\n",
    "\n",
    "rho=(3-(5)**.5)/2\n",
    "def function(x):\n",
    "    result= x**4-14*(x**3)+60*(x**2)-70*x\n",
    "    return result\n",
    "range_ab=[0,2]\n",
    "locate_x=.3\n",
    "n=1\n",
    "while ((1-rho)**n)>=locate_x/2:\n",
    "    n=n+1\n",
    "print(\"No of iterations\",n)\n",
    "def ab(a0,b0):\n",
    "    a_next=a0+rho*(b0-a0)\n",
    "    b_next=a0+(1-rho)*(b0-a0)\n",
    "    return a_next,b_next\n",
    "for i in range(n):\n",
    "    a,b=ab(range_ab[0],range_ab[1]) # this is used to get the next 2 points for a,b\n",
    "    f1=function(a)\n",
    "    f2=function(b)\n",
    "    print(f'\\nf(a{i+1})= {f1},f(b{i+1})= {f2}')\n",
    "    new=max(f1,f2)\n",
    "    print(\"max=\",new)\n",
    "    if new==f1:\n",
    "        range_ab[0]=a\n",
    "    else:\n",
    "        range_ab[1]=b\n",
    "    print(\"updated range:\\t\",range_ab)\n",
    "    print (\"difference : \", range_ab[1]-range_ab[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "95dce085",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "enter initial epselon value.1\n",
      "E= 8.0\n",
      "\n",
      "Iteration No 1\n",
      "f(a1)= -24.33984375,f(b1)= -18.65234375\n",
      "max= -18.65234375\n",
      "updated range:\t [0, 1.25]\n",
      "\n",
      "Iteration No 2\n",
      "f(a2)= -21.6875,f(b2)= -24.33984375\n",
      "max= -21.6875\n",
      "updated range:\t [0.5, 1.25]\n",
      "\n",
      "Iteration No 3\n",
      "f(a3)= -24.33984375,f(b3)= -23.0\n",
      "max= -23.0\n",
      "updated range:\t [0.5, 1.0]\n",
      "\n",
      "Iteration No 4\n",
      "f(a4)= -24.271312109374996,f(b4)= -24.368530859375\n",
      "max= -24.271312109374996\n",
      "updated range:\t [0.725, 1.0]\n"
     ]
    }
   ],
   "source": [
    "## FIBONACCI METHOD\n",
    "\n",
    "def function(x):\n",
    "    result= x**4-14*(x**3)+60*(x**2)-70*x\n",
    "    return result\n",
    "range_ab=[0,2]\n",
    "epslon=float(input(\"enter initial epselon value\"))\n",
    "E_value= ((1+2*epslon)/.15)\n",
    "print(\"E=\",E_value)\n",
    "def fibonacci_series(E_value):\n",
    "      n=[1,2]\n",
    "      i=1\n",
    "      while E_value>n[i]:\n",
    "          new=(n[i-1]+n[i])\n",
    "          n.append(new)\n",
    "          i+=1\n",
    "      return n\n",
    "fb_series=fibonacci_series(E_value)\n",
    "abc=len(fb_series)\n",
    "n=abc-1\n",
    "def ab(a0,b0,rho):\n",
    "    a_next=a0+rho*(b0-a0)\n",
    "    b_next=a0+(1-rho)*(b0-a0)\n",
    "    return a_next,b_next\n",
    "def rho(a,i):\n",
    "    rh=1-(fb_series[a-i-2]/fb_series[a-i-1])\n",
    "    return rh\n",
    "for i in range(n):\n",
    "    print(f\"\\nIteration No {i+1}\")\n",
    "    rh=rho(abc,i)\n",
    "    if rh==0.5:\n",
    "        rh-=.05\n",
    "    a,b=ab(range_ab[0],range_ab[1],rh)\n",
    "    f1=function(a)\n",
    "    f2=function(b)\n",
    "    print(f'f(a{i+1})= {f1},f(b{i+1})= {f2}')\n",
    "    new=max(f1,f2)\n",
    "    print(\"max=\",new)\n",
    "    if new==f1:\n",
    "        range_ab[0]=a\n",
    "    else:\n",
    "        range_ab[1]=b\n",
    "    print(\"updated range:\\t\",range_ab)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "bbd07004",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "d 3*x**2 - 24.4*x + 7.45\n",
      "d2 6*x - 24.4\n",
      "x0= 8.91912\n",
      "\n",
      "x1= 7.94107\n",
      "\n",
      "x2= 7.81762\n",
      "\n",
      "x3= 7.81559\n",
      "\n",
      "x4= 7.81559\n"
     ]
    }
   ],
   "source": [
    "## Newton's method\n",
    "\n",
    "from sympy import symbols, diff, simplify\n",
    "#equation_str = input(\"Enter an equation in terms of 'x': \")\n",
    "#equation_str=x**4-14*(x**3)+60*(x**2)-70*x\n",
    "x = symbols('x')\n",
    "equation_str=x**3-12.2*(x**2)+7.45*(x)+42\n",
    "derivative = diff(equation_str, x)\n",
    "print(\"d\",derivative)\n",
    "derivative_2nd=diff(derivative, x)\n",
    "print(\"d2\",derivative_2nd)\n",
    "xi=12\n",
    "accuracy=5\n",
    "def xnext(x0):\n",
    "    x1=x0-(derivative.subs(x, x0)/derivative_2nd.subs(x ,x0))\n",
    "    return x1\n",
    "x0=round(xnext(xi),accuracy)\n",
    "print(f'x{0}= {x0}')\n",
    "i=0\n",
    "while True:\n",
    "    i += 1\n",
    "    xn=round(xnext(x0),accuracy)\n",
    "    print(f'\\nx{i}= {xn}')\n",
    "    if x0==xn:\n",
    "        break\n",
    "    else:\n",
    "        x0=xn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "4a3f180d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Iteration: 1\n",
      "x0=13, x1=12, x2=11.401575\n",
      "\n",
      "Iteration: 2\n",
      "x0=12, x1=11.401575, x2=11.227209\n",
      "\n",
      "Iteration: 3\n",
      "x0=11.401575, x1=11.227209, x2=11.201028\n",
      "\n",
      "Iteration: 4\n",
      "x0=11.227209, x1=11.201028, x2=11.200005\n",
      "\n",
      "Iteration: 5\n",
      "x0=11.201028, x1=11.200005, x2=11.2\n",
      "\n",
      "Iteration: 6\n",
      "x0=11.200005, x1=11.2, x2=11.2\n",
      "\n",
      " Updated range[11.200000001073377,11.2]\n"
     ]
    }
   ],
   "source": [
    "## Secant method\n",
    "\n",
    "def g(x):\n",
    "    y=x**3-12.2*(x**2)+7.45*x+42\n",
    "    return y\n",
    "def xkplus1(x0,x1):\n",
    "    Nr=g(x1)*x0-g(x0)*x1\n",
    "    Dr=g(x1)-g(x0)\n",
    "    x2=Nr/Dr\n",
    "    return (x2)\n",
    "x0=13\n",
    "x1=12\n",
    "eps=.000005\n",
    "i=0\n",
    "while (abs(x0-x1)>eps):\n",
    "    x2=xkplus1(x0,x1)\n",
    "    print(\"\\nIteration:\",i+1)\n",
    "    print(f'x0={round(x0,6)}, x1={round(x1,6)}, x2={round(x2,6)}')\n",
    "    x0=x1\n",
    "    x1=x2\n",
    "    i+=1\n",
    "print(f\"\\n Updated range[{x0},{x1}]\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "24c4427c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "f1= 12.0000000000000\n",
      "updated range is [0, 1.0]\n",
      "f2= -20.0000000000000\n",
      "updated range is [0.5, 1.0]\n",
      "f3= -1.93750000000000\n",
      "updated range is [0.75, 1.0]\n"
     ]
    }
   ],
   "source": [
    "# Bisection method\n",
    "\n",
    "from sympy import symbols, diff, simplify\n",
    "#equation_str = input(\"Enter an equation in terms of 'x': \")\n",
    "x = symbols('x')\n",
    "equation_str=x**4-14*(x**3)+60*(x**2)-70*x\n",
    "derivative = diff(equation_str, x)\n",
    "range_ab=[0,2]\n",
    "wish_range=.3\n",
    "n=0\n",
    "while (.5)**n>(wish_range/2):\n",
    "    midP=(range_ab[0]+range_ab[1])/2\n",
    "    fxi=derivative.subs(x,midP)\n",
    "    print(f'f{n+1}=',fxi)\n",
    "    if fxi>0:\n",
    "        range_ab[1]=midP\n",
    "    else:\n",
    "        range_ab[0]=midP\n",
    "    print(f'updated range is {range_ab}')\n",
    "    n+=1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b107b36b",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
